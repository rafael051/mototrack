package br.com.fiap.mototrack.exception;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

/**
 * # üö® ValidationHandler
 *
 * Captura e trata exce√ß√µes de valida√ß√£o lan√ßadas por `@Valid` em DTOs.
 * Retorna uma lista enxuta com os campos inv√°lidos e suas respectivas mensagens.
 *
 * ---
 * ‚úÖ √ötil para respostas padronizadas e amig√°veis no front-end.
 * Exemplo de resposta:
 * ```json
 * [
 *   { "field": "placa", "message": "A placa √© obrigat√≥ria." },
 *   { "field": "ano", "message": "O ano deve ser no m√≠nimo 2000." }
 * ]
 * ```
 *
 * @author Rafael
 * @since 1.0
 */
@RestControllerAdvice
public class ValidationHandler {

    /**
     * üì¶ DTO interno para representar erros de valida√ß√£o.
     *
     * - `field`: nome do campo inv√°lido
     * - `message`: mensagem associada √† falha de valida√ß√£o
     */
    record ValidationError(String field, String message) {
        public ValidationError(FieldError fieldError) {
            this(fieldError.getField(), fieldError.getDefaultMessage());
        }
    }

    /**
     * ‚ö†Ô∏è Intercepta `MethodArgumentNotValidException` (erros de valida√ß√£o em @RequestBody).
     *
     * @param ex exce√ß√£o capturada
     * @return lista de erros formatados
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public List<ValidationError> handle(MethodArgumentNotValidException ex) {
        return ex.getFieldErrors()
                .stream()
                .map(ValidationError::new)
                .toList();
    }
}
