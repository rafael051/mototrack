package br.com.fiap.mototrack.controller;

import br.com.fiap.mototrack.dto.request.UsuarioRequest;
import br.com.fiap.mototrack.dto.response.UsuarioResponse;
import br.com.fiap.mototrack.filter.UsuarioFilter;
import br.com.fiap.mototrack.service.UsuarioService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springdoc.core.annotations.ParameterObject;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize; // ‚úÖ prote√ß√£o por perfil (Sprint 3)
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.util.List;

/**
 * ## üë§ Controller: UsuarioController
 *
 * Controlador REST respons√°vel pelos endpoints da entidade <b>Usuario</b>.
 * Oferece opera√ß√µes de cria√ß√£o, consulta, atualiza√ß√£o, exclus√£o e busca com filtros din√¢micos.
 *
 * ### ‚úÖ Adequa√ß√µes Sprint 3 (Seguran√ßa e Boas Pr√°ticas)
 * - Prote√ß√£o por perfil (roles) com {@link PreAuthorize}: ADMIN e USER.
 * - Documenta√ß√£o com OpenAPI/Swagger e exig√™ncia de seguran√ßa ({@link SecurityRequirement}).
 *   > Observa√ß√£o: Se estiver usando sess√£o (form login), o "cadeado" no Swagger indica prote√ß√£o,
 *   > mas a autentica√ß√£o acontece via sess√£o do navegador. Se adotar JWT depois, mantenha "bearerAuth".
 * - Respostas padronizadas com {@link ResponseEntity}.
 * - Pagina√ß√£o e ordena√ß√£o nos endpoints de consulta.
 *
 * ### üîê Pap√©is/Autoriza√ß√£o
 * - ADMIN: criar, atualizar e excluir usu√°rios.
 * - USER/ADMIN: consultar (listar, buscar por ID, consultar com filtros).
 *
 * ### üìå Observa√ß√µes Importantes
 * - Evite logar dados sens√≠veis (ex.: senha). Aqui os logs s√£o informativos e n√£o imprimem o DTO inteiro.
 * - Mantenha {@code @EnableMethodSecurity(prePostEnabled = true)} no SecurityConfig para habilitar @PreAuthorize.
 * - Por padr√£o, {@code hasRole('ADMIN')} verifica a authority {@code ROLE_ADMIN}.
 *
 * @author
 *   Equipe MotoTrack ‚Äî Mottu
 */
@Validated
@SecurityRequirement(name = "bearerAuth")
@Tag(name = "Usuario", description = "Endpoints relacionados ao controle de usu√°rios do sistema Mottu")
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping(value = "/usuarios", produces = MediaType.APPLICATION_JSON_VALUE)
@RequiredArgsConstructor
public class UsuarioController {

    private static final Logger log = LoggerFactory.getLogger(UsuarioController.class);
    private final UsuarioService service;

    /**
     * ### üë§ POST /usuarios
     * Cadastra um novo usu√°rio no sistema.
     *
     * #### Regras de Seguran√ßa
     * - üîí Requer perfil <b>ADMIN</b>.
     *
     * #### Valida√ß√µes
     * - O corpo da requisi√ß√£o √© validado com Bean Validation em {@link UsuarioRequest}.
     *
     * #### Respostas
     * - <b>201 Created</b> com o objeto criado no corpo e cabe√ßalho <b>Location</b> apontando para <code>/usuarios/{id}</code>.
     * - <b>400 Bad Request</b> para erros de valida√ß√£o.
     * - <b>401/403</b> quando o token √© inv√°lido/ausente ou o perfil n√£o tem permiss√£o.
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Cadastrar novo usu√°rio", description = "Registra um novo usu√°rio no sistema da Mottu.")
    public ResponseEntity<UsuarioResponse> cadastrar(@RequestBody @Valid UsuarioRequest dto) {
        log.info("üë§ Solicitada cria√ß√£o de usu√°rio");
        UsuarioResponse salvo = service.cadastrar(dto);
        URI location = URI.create("/usuarios/" + salvo.getId());
        return ResponseEntity.created(location).body(salvo);
    }

    /**
     * ### üìÑ GET /usuarios
     * Lista todos os usu√°rios cadastrados (n√£o paginado).
     *
     * #### Regras de Seguran√ßa
     * - üîí Requer perfil <b>USER</b> ou <b>ADMIN</b>.
     *
     * #### Respostas
     * - <b>200 OK</b> com a lista de usu√°rios.
     * - <b>401/403</b> quando o token √© inv√°lido/ausente ou o perfil n√£o tem permiss√£o.
     *
     * #### Nota
     * - Para grandes volumes, considere expor tamb√©m um endpoint paginado (ex.: <code>/usuarios/filtro</code>).
     */
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    @GetMapping
    @Operation(summary = "Listar todos os usu√°rios", description = "Retorna todos os usu√°rios cadastrados no sistema.")
    public ResponseEntity<List<UsuarioResponse>> listarTodos() {
        log.info("üìÑ Listando todos os usu√°rios");
        return ResponseEntity.ok(service.consultarTodos());
    }

    /**
     * ### üîç GET /usuarios/{id}
     * Busca os dados de um usu√°rio espec√≠fico pelo identificador.
     *
     * #### Regras de Seguran√ßa
     * - üîí Requer perfil <b>USER</b> ou <b>ADMIN</b>.
     *
     * #### Respostas
     * - <b>200 OK</b> com o usu√°rio encontrado.
     * - <b>404 Not Found</b> se o usu√°rio n√£o existir.
     * - <b>401/403</b> para problemas de autentica√ß√£o/autoriza√ß√£o.
     */
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    @GetMapping("/{id}")
    @Operation(summary = "Buscar usu√°rio por ID", description = "Retorna os dados do usu√°rio correspondente ao ID informado.")
    public ResponseEntity<UsuarioResponse> buscarPorId(@PathVariable Long id) {
        log.info("üîç Buscando usu√°rio ID: {}", id);
        return ResponseEntity.ok(service.buscarPorId(id));
    }

    /**
     * ### ‚úèÔ∏è PUT /usuarios/{id}
     * Atualiza os dados de um usu√°rio existente.
     *
     * #### Regras de Seguran√ßa
     * - üîí Requer perfil <b>ADMIN</b>.
     *
     * #### Valida√ß√µes
     * - O corpo da requisi√ß√£o √© validado com Bean Validation em {@link UsuarioRequest}.
     *
     * #### Respostas
     * - <b>200 OK</b> com o usu√°rio atualizado.
     * - <b>400 Bad Request</b> para erros de valida√ß√£o.
     * - <b>404 Not Found</b> se o usu√°rio n√£o existir.
     * - <b>401/403</b> para problemas de autentica√ß√£o/autoriza√ß√£o.
     */
    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping(path = "/{id}", consumes = MediaType.APPLICATION_JSON_VALUE)
    @Operation(summary = "Atualizar usu√°rio", description = "Atualiza os dados de um usu√°rio existente no sistema.")
    public ResponseEntity<UsuarioResponse> atualizar(@PathVariable Long id, @RequestBody @Valid UsuarioRequest dto) {
        log.info("‚úèÔ∏è Atualizando usu√°rio ID: {}", id);
        return ResponseEntity.ok(service.atualizar(id, dto));
    }

    /**
     * ### üóëÔ∏è DELETE /usuarios/{id}
     * Remove um usu√°rio do sistema pelo identificador.
     *
     * #### Regras de Seguran√ßa
     * - üîí Requer perfil <b>ADMIN</b>.
     *
     * #### Respostas
     * - <b>204 No Content</b> em caso de exclus√£o bem-sucedida.
     * - <b>404 Not Found</b> se o usu√°rio n√£o existir.
     * - <b>401/403</b> para problemas de autentica√ß√£o/autoriza√ß√£o.
     */
    @PreAuthorize("hasRole('ADMIN')")
    @DeleteMapping("/{id}")
    @Operation(summary = "Excluir usu√°rio", description = "Remove um usu√°rio do sistema com base no ID informado.")
    public ResponseEntity<Void> excluir(@PathVariable Long id) {
        log.info("üóëÔ∏è Excluindo usu√°rio ID: {}", id);
        service.excluir(id);
        return ResponseEntity.noContent().build();
    }

    /**
     * ### üîç GET /usuarios/filtro
     * Consulta usu√°rios aplicando filtros din√¢micos com suporte a pagina√ß√£o e ordena√ß√£o.
     *
     * #### Regras de Seguran√ßa
     * - üîí Requer perfil <b>USER</b> ou <b>ADMIN</b>.
     *
     * #### Filtros Suportados (exemplos)
     * - Campos do {@link UsuarioFilter} (ex.: nome, email, status, datas).
     * - Pagina√ß√£o via {@link Pageable}: <code>size</code>, <code>page</code>.
     * - Ordena√ß√£o via <code>sort=campo,ASC|DESC</code>.
     *
     * #### Exemplos de Uso
     * - <code>/usuarios/filtro?nome=ana&email=@empresa.com&size=10&page=0&sort=nome,desc</code>
     *
     * #### Respostas
     * - <b>200 OK</b> com um {@link Page} de {@link UsuarioResponse}.
     * - <b>401/403</b> para problemas de autentica√ß√£o/autoriza√ß√£o.
     */
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    @GetMapping("/filtro")
    @Operation(
            summary = "Filtrar usu√°rios com pagina√ß√£o e ordena√ß√£o",
            description = "Permite aplicar filtros nos dados dos usu√°rios com suporte a pagina√ß√£o e ordena√ß√£o por query params."
    )
    public ResponseEntity<Page<UsuarioResponse>> filtrarComPaginacao(
            @ParameterObject @ModelAttribute UsuarioFilter filtro,
            @ParameterObject
            @PageableDefault(size = 20, sort = "nome", direction = Sort.Direction.ASC) Pageable pageable
    ) {
        log.info("üóÉÔ∏è Consulta com filtros: {}", filtro);
        return ResponseEntity.ok(service.consultarComFiltro(filtro, pageable));
    }
}
